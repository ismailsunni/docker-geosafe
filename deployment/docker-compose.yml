version: '2'
services:


  elasticsearch:
    image: elasticsearch
    network_mode: "bridge"
    restart: unless-stopped:5

  rabbitmq:
    image: rabbitmq
    network_mode: "bridge"
    restart: unless-stopped:5

  postgis:
    image: kartoza/postgis:9.4-2.1
    volumes:
      - './pg/postgres_data:/var/lib/postgresql'
    environment:
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
    network_mode: "bridge"
    restart: unless-stopped:5

  qgis-server:
    build: docker-qgis-server
    volumes:
      - '../src/geonode:/usr/src/app'
      - '../src/core:/usr/src/core'
      - '../src/geosafe:/usr/src/geosafe'
      - '../src/geonode_qgis_server/geonode_qgis_server:/usr/src/geonode_qgis_server'
      - '../src/otf-project:/opt/qgis-server/plugins/otf-project'
      - './qgis-web:/var/www'
      - './qgis-server-log:/tmp/qgis-server'
    environment:
      - DEBUG=False
      - QGIS_LOG_FILE=/tmp/qgis-server/qgis.log
      - QGIS_SERVER_LOG_FILE=/tmp/qgis-server/qgis-server.log
      - QGIS_DEBUG=5
      - QGIS_SERVER_LOG_LEVEL=5
      - QGIS_PLUGINPATH=/opt/qgis-server/plugins/
      - QGIS_PROJECT_FILE=/project/project.qgs
    links:
      - postgis
    network_mode: "bridge"
    restart: unless-stopped:5

  django:
    build: docker-geonode
    volumes:
      - '../src/geonode:/usr/src/app'
      - '../src/core:/usr/src/core'
      - '../src/geosafe:/usr/src/geosafe'
      - '../src/geonode_qgis_server/geonode_qgis_server:/usr/src/geonode_qgis_server'
      - '../src/otf-project:/opt/qgis-server/plugins'
    command: /setup-geonode.sh
    environment:
      - DATABASE_URL=postgres://docker:docker@postgis:5432/gis
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - DJANGO_SETTINGS_MODULE=geonode.settings
      - GEOSERVER_BASE_URL="http://geoserver:8080/geoserver/"
#      - ALLOWED_HOSTS=['django',]
      - DEBUG=False
      - PYTHONPATH=/usr/src:/usr/src/app/
      - DJANGO_SETTINGS_MODULE=core.settings
      - ROOT_URLCONF=core.urls
      - SITEURL=http://localhost/
      - GEONODE_BASE_URL=http://nginx/
      - QGIS_SERVER_URL=http://qgis-server/
    links:
      - postgis
      - elasticsearch
      - rabbitmq
      - inasafe-output
      - qgis-server
    network_mode: "bridge"
    restart: unless-stopped:5

  nginx:
#    image: geonode/nginx
    build: docker-nginx
    links:
      - django
      - qgis-server
#  Default exposed port.
#  Should be specified in docker-compose.override.yml
#    ports:
#      - "80:80"
    network_mode: "bridge"
    restart: unless-stopped:5

  celery:
    build: docker-geonode
    working_dir: /usr/src/app
    volumes:
      - '../src/geonode:/usr/src/app'
      - '../src/core:/usr/src/core'
      - '../src/geosafe:/usr/src/geosafe'
      - '../src/geonode_qgis_server/geonode_qgis_server:/usr/src/geonode_qgis_server'
    environment:
      - DEBUG=False
      - C_FORCE_ROOT=True
      - DATABASE_URL=postgres://docker:docker@postgis:5432/gis
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - PYTHONPATH=/usr/src:/usr/src/app/
      - DJANGO_SETTINGS_MODULE=core.settings
      - ROOT_URLCONF=core.urls
#      - DB_NAME=postgres
#      - DB_USER=postgres
#      - DB_PASS=postgres
      - SITEURL=http://localhost/
      - GEONODE_BASE_URL=http://nginx/
      - QGIS_SERVER_URL=http://qgis-server/
    command: celery -A geosafe worker -l debug -Q default,cleanup,email,update,geosafe -n geonode.%h -B
    links:
      - rabbitmq
      - postgis
      - elasticsearch
      - inasafe-output
      - qgis-server
    network_mode: "bridge"
    restart: unless-stopped:5

  inasafe-output:
    image: nginx
    volumes:
      - ./inasafe/headless/output:/usr/share/nginx/html/output
    ports:
      - "8081:80"
    network_mode: "bridge"
    restart: unless-stopped:5

  inasafe-headless:
    build: docker-inasafe-headless
    volumes:
      - '../src/inasafe:/home/src/inasafe'
      - './inasafe/headless/output:/home/output'
    working_dir: /home/src/inasafe
    environment:
      - C_FORCE_ROOT=True
      - PYTHONPATH=/home/src/inasafe
      - DISPLAY=:99
      - INASAFE_HEADLESS_BROKER_HOST=amqp://guest:guest@rabbitmq:5672/
      - INASAFE_HEADLESS_DEPLOY_OUTPUT_DIR=/home/output/
      - INASAFE_HEADLESS_DEPLOY_OUTPUT_URL=http://inasafe-output/output/
    command: /start-celery.sh prod inasafe-headless
    links:
      - rabbitmq:rabbitmq
      - nginx:nginx
    network_mode: "bridge"
    restart: unless-stopped:5

  inasafe-headless-analysis:
    build: docker-inasafe-headless
    volumes:
      - '../src/inasafe:/home/src/inasafe'
      - './inasafe/headless/output:/home/output'
    working_dir: /home/src/inasafe
    environment:
      - C_FORCE_ROOT=True
      - PYTHONPATH=/home/src/inasafe
      - DISPLAY=:99
      - INASAFE_HEADLESS_BROKER_HOST=amqp://guest:guest@rabbitmq:5672/
      - INASAFE_HEADLESS_DEPLOY_OUTPUT_DIR=/home/output/
      - INASAFE_HEADLESS_DEPLOY_OUTPUT_URL=http://inasafe-output/output/
    command: /start-celery.sh prod inasafe-headless-analysis
    links:
      - rabbitmq:rabbitmq
      - nginx:nginx
    network_mode: "bridge"
    restart: unless-stopped:5

  dbbackup: &dbbackup
    build: docker-backup
    hostname: pg-backups
    volumes:
      - ./pg/dbbackup/backups:/backups
      # this folder is used as target folder for sftppgbackup as the
      # source folder
      - ./sftp_backup/target/pg:/pg_backup
    links:
      - postgis
    environment:
      # make this equal to PG_$(PROJECT_ID) in makefile
      - DUMPPREFIX=PG_inasafegeonode
      # These are all defaults anyway, but setting explicitly in
      # case we ever want to ever use different credentials
      - PGUSER=docker
      - PGPASSWORD=docker
      - PGPORT=5432
      - PGHOST=postgis
      - PGDATABASE=gis
    network_mode: "bridge"
    restart: unless-stopped:5

  sftppgbackup: &sftppgbackup
    image: kartoza/sftp-backup:1.0
    hostname: sftppgbackup
    volumes:
      # this folder is used to store local backups from pg dbbackup
      - ./sftp_backup/backups/pg:/backups
      # this folder is used as target folder/source where the backup comes from
      # this backup comes from dbbackup
      - ./sftp_backup/target/pg:/pg_backup
    environment:
      - DUMPPREFIX=PG_inasafegeonode
      - DAILY=14
      - MONTHLY=12
      - YEARLY=3
      # set this to the target/source folder where the backup comes from
      - TARGET_FOLDER=/pg_backup
    env_file:
      - sftp_pg_credential.env
    restart: unless-stopped:5

  sftpmediabackup: &sftpmediabackup
    image: kartoza/sftp-backup:1.0
    hostname: sftpmediabackup
    volumes:
      # this folder is used to store local backups from django media
      - ./sftp_backup/backups/media:/backups
      # this folder is used as target folder/source where the backup comes from
      # this backup comes from django media
      - ../src/geonode/geonode/uploaded:/media_backup
    environment:
      - DUMPPREFIX=MEDIA_inasafegeonode
      # reduce frequency because the dump is really big
      - DAILY=3
      - MONTHLY=2
      - YEARLY=1
      - TARGET_FOLDER=/media_backup
    env_file:
      - sftp_media_credential.env
    restart: unless-stopped:5

  sftplayerbackup: &sftplayerbackup
    image: kartoza/sftp-backup:1.0
    hostname: sftplayerbackup
    volumes:
      # this folder is used to store local backups from django media
      - ./sftp_backup/backups/layer:/backups
      # this folder is used as target folder/source where the backup comes from
      # this backup comes from qgis layer directory
      - ../src/geonode/geonode/qgis_layer:/layer_backup
    environment:
      - DUMPPREFIX=LAYER_inasafegeonode
      # reduce frequency because the dump is really big
      - DAILY=3
      - MONTHLY=2
      - YEARLY=1
      - TARGET_FOLDER=/layer_backup
    env_file:
      - sftp_layer_credential.env
    restart: unless-stopped:5

  btsync:
    image: kartoza/btsync
    container_name:  dockerosm_btsync
    hostname: btsync
    volumes:
      - /home/docker-geosafe/deployment/sftp_backup:/web
    env_file:
      - btsync.env
    restart: unless-stopped:5
